import { scaffoldIndex } from './scaffold-index';
import { observable } from 'observable';

export function cidIssuer() {
  let cid = 0;
  return () => (cid += 1);
}

export function scaffoldCollection(createResource) {
  const get_cid = cidIssuer();
  const entries = {};
  const idIndex = scaffoldIndex(entries);
  const tag = observable(0);

  /**
   * Increment collection version
   * @return {number}
   */
  const incrementTag = () => tag.set(tag.current + 1);

  /**
   * Get entry by cid
   * @param cid {number}
   * @return {*}
   */
  const get = cid => entries[cid];

  /**
   * Get entry by id
   * @param id {number}
   * @return {*}
   */
  const getById = id =>
    idIndex
      .get(id)
      ?.values()
      .next().value;

  // using instance, so that we are able to rewrite setOrCreateResource in scaffold-child-collection
  const instance = {
    get_cid,
    tag,
    incrementTag,
    entries,
    idIndex,
    get,
    getById,
    /**
     * Set resource data (based on data.id) or create new resource
     * @param data {Object}
     * @param atomic {boolean} Should update tag or not?
     * @return {*}
     */
    setOrCreateResource: (data = {}, atomic = true) => {
      // check if resource is already here
      let entry = getById(data.id);
      if (entry) {
        entry.set(data);
        return entry;
      }
      entry = createResource(data);
      entry.cid = get_cid();
      entry.deleted = false;
      let skip = !atomic;
      entry.subscribe(current => {
        idIndex.add(current.id, entry.cid, !skip);
        if (skip) {
          skip = false;
          return;
        }
        incrementTag();
      });
      entries[entry.cid] = entry;
      return entry;
    },
    /**
     * Add new resource to collection
     * @param data {object} Resource props
     * @return {*} Resource
     */
    add: data => instance.setOrCreateResource(data), // don't use instance.setOrCreateResource directly, it might be re-assigned, also not available at this point
    /**
     * Add multiple resources to collection
     * @param dataArray {Object[]}
     */
    addMany: dataArray => {
      const returnValue = dataArray.map(data =>
        instance.setOrCreateResource(data, false)
      );
      idIndex.incrementTag();
      incrementTag();
      return returnValue;
    },
  };

  return instance;
}
