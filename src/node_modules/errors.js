export class AbortError extends Error {
  constructor(message) {
    super(message);
    this.type = 'AbortError';
  }
}

export class ParseError extends Error {
  constructor(message) {
    super(message);
    this.type = 'ParseError';
  }
}

export class NotFoundError extends Error {
  constructor(message) {
    super(message);
    this.type = 'NotFoundError';
  }
}

export class AuthError extends Error {
  constructor(message) {
    super(message);
    this.type = 'AuthError';
  }
}

/**
 * Throws error if given statement is false
 * @param statement {boolean}
 * @param err {Error}
 */
export function assert(statement, err = new Error()) {
  if (statement === false) throw err;
  return statement;
}

/**
 * Throws error when called
 * @param param {string}
 */
export function requiredParam(param = 'param') {
  throw new Error(`${param} is required`);
}
