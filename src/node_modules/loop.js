import { AbortError, assert } from 'errors';

/**
 * Keeps calling given async function unless cancelled or AbortError is thrown by this function
 * @param task {function(): Promise}
 * @param cancelTask {function=}
 * @returns {function(): Promise & {cancel: function(): void, readonly running: boolean}}
 */
export function loop(
  task = () => Promise.reject(new AbortError()),
  cancelTask = () => {}
) {
  let running = false;
  let currentLoop = Promise.resolve();

  const runTask = async initialParams => {
    let taskReturnValue = initialParams;
    try {
      while (running) {
        taskReturnValue = await task(taskReturnValue);
      }
    } catch (err) {
      assert(err instanceof AbortError, err);
    } finally {
      running = false;
    }
    return taskReturnValue;
  };

  /** Stops the loop, calls the cancelTask callback */
  const cancel = () => {
    running = false;
    cancelTask(task);
  };

  const withLoopProps = o =>
    Object.assign(o, {
      cancel,
      get running() {
        return running;
      },
    });

  /** Starts the task loop if possible */
  const returnValue = initialParams => {
    if (running === false) {
      running = true;
      currentLoop = withLoopProps(runTask(initialParams));
    }
    return currentLoop;
  };

  return withLoopProps(returnValue);
}
