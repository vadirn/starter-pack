import { controlledPromise } from 'promise-helpers/controlled-promise';

/**
 * Runs provided function once per animation frame, passing latest arguments
 * @param fn {Function}
 * @returns {Function & {cancel: Function}}
 */
export function rafThrottle(fn) {
  let cachedArgs;
  let frameId;
  let taskFulfillmentPromise;

  const task = (...args) => {
    cachedArgs = args;
    if (frameId) {
      return taskFulfillmentPromise;
    }

    // taskFulfillmentPromise supposed to be undefined or fulfilled at this point
    taskFulfillmentPromise = controlledPromise();

    frameId = requestAnimationFrame(() => {
      frameId = null;
      try {
        fn(...cachedArgs);
        taskFulfillmentPromise?.resolve();
      } catch (err) {
        taskFulfillmentPromise?.reject(err);
      }
    });

    return taskFulfillmentPromise;
  };

  task.cancel = () => {
    cancelAnimationFrame(frameId);
    frameId = null;
    taskFulfillmentPromise?.resolve();
  };

  return task;
}

export const rafTick = rafThrottle(() => {});
