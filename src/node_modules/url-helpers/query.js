/**
 * Returns an object, representing querystring
 * @param {string} querystring
 * @return {Object}
 */
export function parseQuery(querystring) {
  return querystring
    .slice(1)
    .split('&')
    .reduce((result, item) => {
      const queryItem = item.split('=');
      const nextResult = result;
      const key = decodeURIComponent(queryItem[0]);
      let value = null;
      if (queryItem[1]) {
        value = decodeURIComponent(queryItem[1]);
      }
      if (key.length > 0) {
        nextResult[key] = value || key;
      }
      return nextResult;
    }, {});
}

/**
 * Returns a querystring from an object representation
 * @param {Object} query
 * @returns {string}
 */
export function serializeQuery(query) {
  const keys = Object.keys(query);
  if (keys.length === 0) {
    return '';
  }
  return keys
    .reduce((accum, key) => {
      accum += `${key}=${query[key]}&`;
      return accum;
    }, '?')
    .slice(0, -1);
}
